CREATE TABLE USERS
(
USER_ID NUMBER(38) CONSTRAINT USER_ID_NN NOT NULL,
USER_NAME VARCHAR2(255) CONSTRAINT USER_NAME_NN NOT NULL,
USER_PHOTO VARCHAR2(255) CONSTRAINT USER_PHOTO_NN NOT NULL,
USER_FATHER_NAME VARCHAR2(255) CONSTRAINT FATHER_NN NOT NULL,
USER_MOTHER_NAME VARCHAR2(255) CONSTRAINT MOTHER_NN NOT NULL,
USER_GENDER VARCHAR2(255) CONSTRAINT GENDER_NN NOT NULL,
USER_DOB DATE CONSTRAINT USER_DOB_NN NOT NULL,
USER_NID VARCHAR2(255) CONSTRAINT USER_NID_NN NOT NULL,
USER_MOBILE_NO VARCHAR2(255) CONSTRAINT USER_MOBILE_NN NOT NULL,
USER_PASSWORD VARCHAR2(255)CONSTRAINT USER_PASSWORD_NN NOT NULL,

CONSTRAINT CHECK_USER_GENDER CHECK (USER_GENDER IN('male','female')),
CONSTRAINT PK_USER_ID PRIMARY KEY(USER_ID),
CONSTRAINT UNQ_USER_MOBILE_N0 UNIQUE(USER_MOBILE_NO)
);


CREATE TABLE CUSTOMER
(
CUSTOMER_ID NUMBER(38) CONSTRAINT CUSTOMER_ID_NN NOT NULL,
CUSTOMER_BALANCE NUMBER,

CONSTRAINT PK_CUSTOMER_ID PRIMARY KEY (CUSTOMER_ID),
CONSTRAINT FK_CUSTOMER_ID FOREIGN KEY (CUSTOMER_ID) REFERENCES USERS(USER_ID)
);


CREATE TABLE AGENT
(
AGENT_ID NUMBER(38) CONSTRAINT AGENT_ID_NN NOT NULL,
AGENT_BANK_AC NUMBER(38) CONSTRAINT AGENT_BANK_AC_NN NOT NULL,
AGENT_BALANCE NUMBER,

CONSTRAINT PK_AGENT_ID PRIMARY KEY (AGENT_ID),
CONSTRAINT FK_AGENT_ID FOREIGN KEY (AGENT_ID) REFERENCES USERS(USER_ID)
);


CREATE TABLE OFFERS
(
OFFER_ID NUMBER(38) CONSTRAINT OFFER_ID_NN NOT NULL,
DISCOUNT_PERCENT NUMBER CONSTRAINT DISCOUNT_PR_NN NOT NULL,

CONSTRAINT PK_OFFER_ID PRIMARY KEY (OFFER_ID),
CONSTRAINT CHECK_DISCOUNT_PERCENT CHECK (DISCOUNT_PERCENT BETWEEN 0 AND 100)
);


CREATE TABLE MERCHANTS
(
MERCHANT_ID NUMBER(38) CONSTRAINT MERCHANT_ID_NN NOT NULL,
MERCHANT_BRANCH_ID NUMBER(38) CONSTRAINT MERCHANT_BRANCH_ID_NN NOT NULL,
MERCHANT_NAME VARCHAR2(255) CONSTRAINT MERCHANT_NAME_NN NOT NULL,
MERCHANT_LOGO_IMAGE VARCHAR2(255) CONSTRAINT MERCHANT_LOGO_NN NOT NULL,
MERCHANT_BANK_AC_NO NUMBER(38) CONSTRAINT MERCHANT_BANK_AC_NN NOT NULL,
OFFER_ID NUMBER(38),

CONSTRAINT PK_MERCHANTS PRIMARY KEY (MERCHANT_ID,MERCHANT_BRANCH_ID),
CONSTRAINT FK_OFFER_ID_MERCHANTS FOREIGN KEY (OFFER_ID) REFERENCES OFFERS(OFFER_ID)
);


CREATE TABLE MOBILE_OPERATOR
(
OPERATOR_ID NUMBER(38) CONSTRAINT OPERATOR_ID_NN NOT NULL,
OPERATOR_NAME VARCHAR2(255) CONSTRAINT OPERATOR_NAME_NN NOT NULL,
OPERATOR_BANK_AC_NO NUMBER(38) CONSTRAINT OPERATOR_BANK_AC_NN NOT NULL,

CONSTRAINT PK_MOBILE_OPERATOR PRIMARY KEY(OPERATOR_ID)
);


CREATE TABLE UTILITY_SERVICE
(
SERVICE_ID NUMBER(38) CONSTRAINT SERVICE_ID_NN NOT NULL,
SERVICE_NAME VARCHAR2(255) CONSTRAINT SERVICE_NAME_NN NOT NULL,
SERVICE_BANK_AC_NO NUMBER(38) CONSTRAINT SERVICE_BANK_AC_NN NOT NULL,

CONSTRAINT PK_UTILITY_SERVICE PRIMARY KEY(SERVICE_ID)
);


CREATE TABLE HISTORY_TYPE
(
TYPE_ID NUMBER(38) CONSTRAINT TYPE_ID_NN NOT NULL,
TYPE_NAME VARCHAR2(255) CONSTRAINT TYPE_NAME_NN NOT NULL,

CONSTRAINT PK_HISTORY_TYPE PRIMARY KEY(TYPE_ID)
);


CREATE TABLE HISTORY
(
HISTORY_ID NUMBER(38) CONSTRAINT HISTORY_ID_NN NOT NULL,
TYPE_ID NUMBER(38) CONSTRAINT HISTORY_TYPE_ID_NN NOT NULL,
TRANSACTION_ID NUMBER(38) CONSTRAINT TRANSCATION_ID_NN NOT NULL,
TRANSACTION_TIME DATE CONSTRAINT TRANSCATION_DATE_NN NOT NULL,
TRANSACTION_AMOUNT NUMBER,

CONSTRAINT PK_HISTORY_ID PRIMARY KEY(HISTORY_ID),
CONSTRAINT FK_TYPE_ID_HIS FOREIGN KEY(TYPE_ID) REFERENCES HISTORY_TYPE(TYPE_ID)
);


CREATE TABLE PAYMENT
(
MERCHANT_ID NUMBER(38) CONSTRAINT PAYMENT_MERCHANT_ID_NN NOT NULL,
MERCHANT_BRANCH_ID NUMBER(38) CONSTRAINT PAYMENT_MERCHANT_BRANCH_ID_NN NOT NULL,
USER_ID NUMBER(38) CONSTRAINT PAYMENT_USER_ID_NN NOT NULL,
HISTORY_ID NUMBER(38) CONSTRAINT PAYMENT_HISTORY_ID_NN NOT NULL,

CONSTRAINT PK_PAYMENT PRIMARY KEY(USER_ID,HISTORY_ID),
CONSTRAINT UNQ_PAYMENT UNIQUE(MERCHANT_ID,HISTORY_ID),
CONSTRAINT FK_USER_ID_PAYMENT FOREIGN KEY(USER_ID) REFERENCES USERS(USER_ID),
CONSTRAINT FK_HISTORY_ID_PAYMENT FOREIGN KEY(HISTORY_ID) REFERENCES HISTORY(HISTORY_ID),
CONSTRAINT FK_MERCHANT_ID_PAYMENT FOREIGN KEY(MERCHANT_ID,MERCHANT_BRANCH_ID) REFERENCES MERCHANTS(MERCHANT_ID,MERCHANT_BRANCH_ID)
);


CREATE TABLE CASH_OUT
(
CUSTOMER_ID NUMBER(38) CONSTRAINT C0_CUSTOMER_ID_NN NOT NULL,
AGENT_ID NUMBER(38) CONSTRAINT CO_AGENT_ID_NN NOT NULL,
HISTORY_ID NUMBER(38) CONSTRAINT CO_HISTORY_ID_NN NOT NULL,

CONSTRAINT PK_CASH_OUT PRIMARY KEY (CUSTOMER_ID,HISTORY_ID),
CONSTRAINT UNQ_CASH_OUT UNIQUE(AGENT_ID,HISTORY_ID),
CONSTRAINT FK_CUSTOMER_ID_C_O FOREIGN KEY (CUSTOMER_ID) REFERENCES CUSTOMER(CUSTOMER_ID),
CONSTRAINT FK_AGENT_ID_C_O FOREIGN KEY (AGENT_ID) REFERENCES AGENT(AGENT_ID),
CONSTRAINT FK_HISTORY_ID_C_O FOREIGN KEY (HISTORY_ID) REFERENCES HISTORY(HISTORY_ID)
);



CREATE TABLE SEND_MONEY
(
FROM_CUSTOMER_ID NUMBER(38) CONSTRAINT SMFROM_CUSTOMER_ID_NN NOT NULL,
TO_CUSTOMER_ID NUMBER(38) CONSTRAINT SMTO_CUSTOMER_ID_NN NOT NULL,
HISTORY_ID NUMBER(38) CONSTRAINT SM_HISTORY_ID_NN NOT NULL,

CONSTRAINT PK_SEND_MONEY PRIMARY KEY (FROM_CUSTOMER_ID,HISTORY_ID),
CONSTRAINT UNQ_SEND_MONEY UNIQUE(TO_CUSTOMER_ID,HISTORY_ID),
CONSTRAINT FK_FROM_CUSTOMER_ID_S_M FOREIGN KEY (FROM_CUSTOMER_ID) REFERENCES CUSTOMER(CUSTOMER_ID),
CONSTRAINT FK_TO_CUSTOMER_ID_S_M FOREIGN KEY (TO_CUSTOMER_ID) REFERENCES CUSTOMER(CUSTOMER_ID),
CONSTRAINT FK_HISTORY_ID_S_M FOREIGN KEY (HISTORY_ID) REFERENCES HISTORY(HISTORY_ID)
);


CREATE TABLE CASH_IN
(
CUSTOMER_ID NUMBER(38) CONSTRAINT CI_CUSTOMER_ID_NN NOT NULL,
AGENT_ID NUMBER(38) CONSTRAINT CI_AGENT_ID_NN NOT NULL,
HISTORY_ID NUMBER(38) CONSTRAINT CI_HISTORY_ID_NN NOT NULL,

CONSTRAINT PK_CASH_IN PRIMARY KEY(CUSTOMER_ID,HISTORY_ID),
CONSTRAINT UNQ_CASH_IN UNIQUE(AGENT_ID,HISTORY_ID),
CONSTRAINT FK_CUSTOMER_ID_C_I FOREIGN KEY (CUSTOMER_ID) REFERENCES CUSTOMER(CUSTOMER_ID),
CONSTRAINT FK_AGENT_ID_C_I FOREIGN KEY (AGENT_ID) REFERENCES AGENT(AGENT_ID),
CONSTRAINT FK_HISTORY_ID_C_I FOREIGN KEY (HISTORY_ID) REFERENCES HISTORY(HISTORY_ID)
);

CREATE TABLE MOBILE_RECHARGE
(
OPERATOR_ID NUMBER(38) CONSTRAINT RECHARGE_OPERATOR_ID_NN NOT NULL,
USER_ID NUMBER(38) CONSTRAINT RECHARGE_USER_ID_NN NOT NULL,
HISTORY_ID NUMBER(38) CONSTRAINT RECHARGE_HISTORY_ID_NN NOT NULL,

CONSTRAINT PK_MOBILE_RECHARGE PRIMARY KEY(USER_ID,HISTORY_ID),
CONSTRAINT UNQ_RECHARGE UNIQUE(OPERATOR_ID,HISTORY_ID),
CONSTRAINT FK_OPERATOR_ID_RECHARGE FOREIGN KEY(OPERATOR_ID) REFERENCES MOBILE_OPERATOR(OPERATOR_ID),
CONSTRAINT FK_USER_ID_RECHARGE FOREIGN KEY(USER_ID) REFERENCES USERS(USER_ID),
CONSTRAINT FK_HISTORY_ID_RECHARGE FOREIGN KEY(HISTORY_ID) REFERENCES HISTORY(HISTORY_ID)
);


CREATE TABLE PAY_UTILITY_BILL
(
SERVICE_ID NUMBER(38) CONSTRAINT PUBILL_SERVICE_ID_NN NOT NULL,
USER_ID NUMBER(38) CONSTRAINT PUBILL_USER_ID_NN NOT NULL,
HISTORY_ID NUMBER(38) CONSTRAINT PUBILL_HISTORY_ID_NN NOT NULL,

CONSTRAINT PK_PAY_UTILITY_BILL PRIMARY KEY(USER_ID,HISTORY_ID),
CONSTRAINT UNQ_PAY_UTILITY_BILL UNIQUE(SERVICE_ID,HISTORY_ID),
CONSTRAINT FK_USER_ID_PAY_U_B FOREIGN KEY(USER_ID) REFERENCES USERS(USER_ID),
CONSTRAINT FK_HISTORY_ID_PAY_U_B FOREIGN KEY(HISTORY_ID) REFERENCES HISTORY(HISTORY_ID),
CONSTRAINT FK_SERVICE_ID_PAY_U_B FOREIGN KEY(SERVICE_ID) REFERENCES UTILITY_SERVICE(SERVICE_ID)
);



--ADDING ADMIN TABLE

CREATE TABLE ADMIN
(
ADMIN_ID NUMBER(38) CONSTRAINT PK_ADMIN PRIMARY KEY,
ADMIN_NAME VARCHAR(255) CONSTRAINT NN_ADMIN_NAME NOT NULL,
ADMIN_PASSWORD VARCHAR(255) CONSTRAINT NN_ADMIN_PASS NOT NULL,
APPROVED_BY NUMBER(38),

CONSTRAINT FK_ADMIN_ID FOREIGN KEY(APPROVED_BY) REFERENCES ADMIN(ADMIN_ID)
);

ALTER TABLE CUSTOMER ADD
(
APPROVED_BY NUMBER(38),
CONSTRAINT FK_CUSTOMER_ADMIN_ID FOREIGN KEY(APPROVED_BY) REFERENCES ADMIN(ADMIN_ID)
);

ALTER TABLE AGENT ADD
(
APPROVED_BY NUMBER(38),
CONSTRAINT FK_AGENT_ADMIN_ID FOREIGN KEY(APPROVED_BY) REFERENCES ADMIN(ADMIN_ID)
);

ALTER TABLE MERCHANTS ADD
(
APPROVED_BY NUMBER(38),
CONSTRAINT FK_MERCHANTS_ADMIN_ID FOREIGN KEY(APPROVED_BY) REFERENCES ADMIN(ADMIN_ID)
);

ALTER TABLE UTILITY_SERVICE ADD
(
SERVICE_TYPE VARCHAR2(255) NOT NULL,
APPROVED_BY NUMBER(38),
CONSTRAINT FK_UTILITY_SERVICE_ADMIN_ID FOREIGN KEY(APPROVED_BY) REFERENCES ADMIN(ADMIN_ID)
);

ALTER TABLE MOBILE_OPERATOR ADD
(
APPROVED_BY NUMBER(38),
CONSTRAINT FK_MOBILE_OPERATOR_ADMIN_ID FOREIGN KEY(APPROVED_BY) REFERENCES ADMIN(ADMIN_ID)
);

--MODIFY TRANSACTION_ID COLUMN DECLARE AS VARCHAR2(38)

ALTER TABLE HISTORY
MODIFY TRANSACTION_ID VARCHAR2(38);

--DROPPING TRANSACTION_AMOUNT COLUMN FROM HISTORY TABLE
ALTER TABLE HISTORY DROP COLUMN TRANSACTION_AMOUNT;

--ADDING TRANSACTION AMOUNT COLUMN TO ALL TYPE OF TRANSACTION

ALTER TABLE SEND_MONEY ADD TRANSACTION_AMOUNT_S_M NUMBER(38) CONSTRAINT TRANSACTION_AMOUNT_S_M_NN NOT NULL;
ALTER TABLE CASH_IN ADD TRANSACTION_AMOUNT_C_I NUMBER(38) CONSTRAINT TRANSACTION_AMOUNT_C_I_NN NOT NULL;
ALTER TABLE CASH_OUT ADD TRANSACTION_AMOUNT_C_O NUMBER(38) CONSTRAINT TRANSACTION_AMOUNT_C_O_NN NOT NULL;
ALTER TABLE MOBILE_RECHARGE ADD TRANSACTION_AMOUNT_M_R NUMBER(38) CONSTRAINT TRANSACTION_AMOUNT_M_R_NN NOT NULL;
ALTER TABLE PAY_UTILITY_BILL ADD TRANSACTION_AMOUNT_P_U_B NUMBER(38) CONSTRAINT TRANSACTION_AMOUNT_P_U_B_NN NOT NULL;
ALTER TABLE PAYMENT ADD TRANSACTION_AMOUNT_PAYMENT NUMBER(38) CONSTRAINT TRANSACTION_AMOUNT_PAYMENT_NN NOT NULL;



--ALTER TABLE PAYMENT TO MODIFY CONSTRAINT HISTORY_ID TO ADD ON DELETE CASCADE OPTION
ALTER TABLE PAYMENT DROP CONSTRAINT FK_HISTORY_ID_PAYMENT;
ALTER TABLE PAYMENT ADD CONSTRAINT FK_HISTORY_ID_PAYMENT FOREIGN KEY(HISTORY_ID) REFERENCES HISTORY(HISTORY_ID) ON DELETE CASCADE;

--ALTER TABLE SEND_MONEY TO MODIFY CONSTRAINT HISTORY_ID TO ADD ON DELETE CASCADE OPTION
ALTER TABLE SEND_MONEY DROP CONSTRAINT FK_HISTORY_ID_S_M;
ALTER TABLE SEND_MONEY ADD CONSTRAINT FK_HISTORY_ID_S_M FOREIGN KEY(HISTORY_ID) REFERENCES HISTORY(HISTORY_ID) ON DELETE CASCADE;

--ALTER TABLE CASH_OUT TO MODIFY CONSTRAINT HISTORY_ID TO ADD ON DELETE CASCADE OPTION
ALTER TABLE CASH_OUT DROP CONSTRAINT FK_HISTORY_ID_C_O;
ALTER TABLE CASH_OUT ADD CONSTRAINT FK_HISTORY_ID_C_O FOREIGN KEY(HISTORY_ID) REFERENCES HISTORY(HISTORY_ID) ON DELETE CASCADE;

--ALTER TABLE CASH_IN TO MODIFY CONSTRAINT HISTORY_ID TO ADD ON DELETE CASCADE OPTION
ALTER TABLE CASH_IN DROP CONSTRAINT FK_HISTORY_ID_C_I;
ALTER TABLE CASH_IN ADD CONSTRAINT FK_HISTORY_ID_C_I FOREIGN KEY(HISTORY_ID) REFERENCES HISTORY(HISTORY_ID) ON DELETE CASCADE;

--ALTER TABLE MOBILE_RECHARGE TO MODIFY CONSTRAINT HISTORY_ID TO ADD ON DELETE CASCADE OPTION
ALTER TABLE MOBILE_RECHARGE DROP CONSTRAINT FK_HISTORY_ID_RECHARGE;
ALTER TABLE MOBILE_RECHARGE ADD CONSTRAINT FK_HISTORY_ID_RECHARGE FOREIGN KEY(HISTORY_ID) REFERENCES HISTORY(HISTORY_ID) ON DELETE CASCADE;

--ALTER TABLE PAY_UTILITY_BILL TO MODIFY CONSTRAINT HISTORY_ID TO ADD ON DELETE CASCADE OPTION
ALTER TABLE PAY_UTILITY_BILL DROP CONSTRAINT FK_HISTORY_ID_PAY_U_B;
ALTER TABLE PAY_UTILITY_BILL ADD CONSTRAINT FK_HISTORY_ID_PAY_U_B FOREIGN KEY(HISTORY_ID) REFERENCES HISTORY(HISTORY_ID) ON DELETE CASCADE;

--INSERT DATA INTO HISTORY TYPE TABLE
INSERT INTO HISTORY_TYPE(TYPE_ID,TYPE_NAME) VALUES(1,'SEND MONEY');
INSERT INTO HISTORY_TYPE(TYPE_ID,TYPE_NAME) VALUES(2,'CASH IN');
INSERT INTO HISTORY_TYPE(TYPE_ID,TYPE_NAME) VALUES(3,'CASH OUT');
INSERT INTO HISTORY_TYPE(TYPE_ID,TYPE_NAME) VALUES(4,'MOBILE RECHARGE');
INSERT INTO HISTORY_TYPE(TYPE_ID,TYPE_NAME) VALUES(5,'MERCHANT PAYMNET');
INSERT INTO HISTORY_TYPE(TYPE_ID,TYPE_NAME) VALUES(6,'PAY UTILITY BILL');

--CREATING SEQUENCE FOR HISTORY_ID TRIGGER TO GENERATE HISTORY_ID AUTOMATICALLY
CREATE SEQUENCE seq_history_id
START WITH 1
INCREMENT BY 1
NOCACHE
NOCYCLE;

--CREATING TRIGGER FOR HISTORY_ID TO GENERATE HISTORY_ID AUTOMATICALLY
CREATE OR REPLACE TRIGGER history_pk_trigger
BEFORE INSERT
ON HISTORY
FOR EACH ROW
BEGIN
	SELECT seq_history_id.NEXTVAL
	INTO :NEW.HISTORY_ID
	FROM DUAL;
END;
/

--FUNCTION TO CHECK TRANSACTION ID IS UNIQUE OR NOT
CREATE OR REPLACE FUNCTION IS_UNIQUE_TRAN_ID(TRAN_ID IN VARCHAR2)
RETURN BOOLEAN IS
	IS_UNIQUE BOOLEAN := TRUE;
	STR_TRAN_ID VARCHAR2(128);
BEGIN
	FOR R IN (SELECT TRANSACTION_ID FROM HISTORY)
	LOOP
		STR_TRAN_ID := R.TRANSACTION_ID;
		IF STR_TRAN_ID = TRAN_ID THEN
			IS_UNIQUE := FALSE;
		END IF;
		EXIT WHEN (IS_UNIQUE = FALSE);
	END LOOP;
	RETURN IS_UNIQUE;
END;
/

--CREATING TRIGGER TO AUTOMATIC INSERT INTO HISTORY TABLE WHEN INSERTING INTO SEND MONEY TABLE
CREATE OR REPLACE TRIGGER send_money_history_trigger
BEFORE INSERT
ON SEND_MONEY
FOR EACH ROW
DECLARE 
	TRAN_ID VARCHAR2(38);
	TRAN_TIME DATE;
	TRAN_TYPE NUMBER;
	IS_UNIQUE BOOLEAN;
BEGIN
		IS_UNIQUE := FALSE;
		
		LOOP
			SELECT DBMS_RANDOM.STRING('X',10) INTO TRAN_ID FROM DUAL;
			IS_UNIQUE := IS_UNIQUE_TRAN_ID(TRAN_ID);
			EXIT WHEN (IS_UNIQUE = TRUE);
		END LOOP;
		
  	SELECT SYSDATE INTO TRAN_TIME FROM DUAL;
	
	INSERT INTO HISTORY(TYPE_ID,TRANSACTION_ID,TRANSACTION_TIME)
	VALUES(1,TRAN_ID,TRAN_TIME);

	SELECT seq_history_id.currval
	INTO :NEW.HISTORY_ID
	FROM DUAL;
	COMMIT;

END;
/

--CREATING TRIGGER TO AUTOMATIC INSERT INTO HISTORY TABLE WHEN INSERTING INTO CASH IN TABLE
CREATE OR REPLACE TRIGGER cash_in_history_trigger
BEFORE INSERT
ON CASH_IN
FOR EACH ROW
DECLARE 
	TRAN_ID VARCHAR2(38);
	TRAN_TIME DATE;
	TRAN_TYPE NUMBER;
	IS_UNIQUE BOOLEAN;
BEGIN
		IS_UNIQUE := FALSE;
		
		LOOP
			SELECT DBMS_RANDOM.STRING('X',10) INTO TRAN_ID FROM DUAL;
			IS_UNIQUE := IS_UNIQUE_TRAN_ID(TRAN_ID);
			EXIT WHEN (IS_UNIQUE = TRUE);
		END LOOP;
		
  	SELECT SYSDATE INTO TRAN_TIME FROM DUAL;
	
	INSERT INTO HISTORY(TYPE_ID,TRANSACTION_ID,TRANSACTION_TIME)
	VALUES(2,TRAN_ID,TRAN_TIME);
	SELECT seq_history_id.currval
	INTO :NEW.HISTORY_ID
	FROM DUAL;
	COMMIT;

END;
/

--CREATING TRIGGER TO AUTOMATIC INSERT INTO HISTORY TABLE WHEN INSERTING INTO CASH OUT TABLE
CREATE OR REPLACE TRIGGER cash_out_history_trigger
BEFORE INSERT
ON CASH_OUT
FOR EACH ROW
DECLARE 
	TRAN_ID VARCHAR2(38);
	TRAN_TIME DATE;
	TRAN_TYPE NUMBER;
	IS_UNIQUE BOOLEAN;
BEGIN
		IS_UNIQUE := FALSE;
		
		LOOP
			SELECT DBMS_RANDOM.STRING('X',10) INTO TRAN_ID FROM DUAL;
			IS_UNIQUE := IS_UNIQUE_TRAN_ID(TRAN_ID);
			EXIT WHEN (IS_UNIQUE = TRUE);
		END LOOP;
		
  	SELECT SYSDATE INTO TRAN_TIME FROM DUAL;
	
	INSERT INTO HISTORY(TYPE_ID,TRANSACTION_ID,TRANSACTION_TIME)
	VALUES(3,TRAN_ID,TRAN_TIME);

	SELECT seq_history_id.currval
	INTO :NEW.HISTORY_ID
	FROM DUAL;
	COMMIT;

END;
/


--CREATING TRIGGER TO AUTOMATIC INSERT INTO HISTORY TABLE WHEN INSERTING INTO MOBILE RECHARGE TABLE
CREATE OR REPLACE TRIGGER mob_recharge_history_trigger
BEFORE INSERT
ON MOBILE_RECHARGE
FOR EACH ROW
DECLARE 
	TRAN_ID VARCHAR2(38);
	TRAN_TIME DATE;
	TRAN_TYPE NUMBER;
	IS_UNIQUE BOOLEAN;
BEGIN
		IS_UNIQUE := FALSE;
		
		LOOP
			SELECT DBMS_RANDOM.STRING('X',10) INTO TRAN_ID FROM DUAL;
			IS_UNIQUE := IS_UNIQUE_TRAN_ID(TRAN_ID);
			EXIT WHEN (IS_UNIQUE = TRUE);
		END LOOP;
		
  	SELECT SYSDATE INTO TRAN_TIME FROM DUAL;
	
	INSERT INTO HISTORY(TYPE_ID,TRANSACTION_ID,TRANSACTION_TIME)
	VALUES(4,TRAN_ID,TRAN_TIME);

	SELECT seq_history_id.currval
	INTO :NEW.HISTORY_ID
	FROM DUAL;
	COMMIT;

END;
/

--CREATING TRIGGER TO AUTOMATIC INSERT INTO HISTORY TABLE WHEN INSERTING INTO PAY_UTILITY BILL TABLE
CREATE OR REPLACE TRIGGER utility_bill_history_trigger
BEFORE INSERT
ON PAY_UTILITY_BILL
FOR EACH ROW
DECLARE 
	TRAN_ID VARCHAR2(38);
	TRAN_TIME DATE;
	TRAN_TYPE NUMBER;
	IS_UNIQUE BOOLEAN;
BEGIN
		IS_UNIQUE := FALSE;
		
		LOOP
			SELECT DBMS_RANDOM.STRING('X',10) INTO TRAN_ID FROM DUAL;
			IS_UNIQUE := IS_UNIQUE_TRAN_ID(TRAN_ID);
			EXIT WHEN (IS_UNIQUE = TRUE);
		END LOOP;
		
  	SELECT SYSDATE INTO TRAN_TIME FROM DUAL;
	
	INSERT INTO HISTORY(TYPE_ID,TRANSACTION_ID,TRANSACTION_TIME)
	VALUES(6,TRAN_ID,TRAN_TIME);

	SELECT seq_history_id.currval
	INTO :NEW.HISTORY_ID
	FROM DUAL;
	COMMIT;

END;
/

--CREATING TRIGGER TO AUTOMATIC INSERT INTO HISTORY TABLE WHEN INSERTING INTO PAYMENT TABLE

CREATE OR REPLACE TRIGGER mer_payment_history_trigger
BEFORE INSERT
ON PAYMENT
FOR EACH ROW
DECLARE 
	TRAN_ID VARCHAR2(38);
	TRAN_TIME DATE;
	TRAN_TYPE NUMBER;
	IS_UNIQUE BOOLEAN;
BEGIN
		IS_UNIQUE := FALSE;
		
		LOOP
			SELECT DBMS_RANDOM.STRING('X',10) INTO TRAN_ID FROM DUAL;
			IS_UNIQUE := IS_UNIQUE_TRAN_ID(TRAN_ID);
			EXIT WHEN (IS_UNIQUE = TRUE);
		END LOOP;
		
  	SELECT SYSDATE INTO TRAN_TIME FROM DUAL;
	
	INSERT INTO HISTORY(TYPE_ID,TRANSACTION_ID,TRANSACTION_TIME)
	VALUES(5,TRAN_ID,TRAN_TIME);

	SELECT seq_history_id.currval
	INTO :NEW.HISTORY_ID
	FROM DUAL;
	COMMIT;

END;
/

--PROCEDURE TO DELETE OLD DATA
CREATE OR REPLACE PROCEDURE DELETE_30_DAY_OLD_HISTORY(EMP_ID IN VARCHAR2) IS
	N_DAYS NUMBER;
BEGIN
	FOR R IN (SELECT * FROM HISTORY)
	LOOP
	  N_DAYS := TRUNC(SYSDATE - R.TRANSACTION_TIME, 0);
    IF N_DAYS >= 30 THEN
		  DELETE FROM HISTORY WHERE HISTORY_ID = R.HISTORY_ID;
	  END IF; 
		COMMIT;
END LOOP;
END;

--PROGRAM NEEDED TO CREATE A JOB_SCHEDULE
BEGIN
  DBMS_SCHEDULER.create_program(
  program_name => 'DEL_1_MONTH_OLD_HISTORY_PROG',
  program_type => 'STORED_PROCEDURE',
  program_action => 'DELETE_30_DAY_OLD_HISTORY',
  number_of_arguments => 1,
  enabled => FALSE,
  comments => 'Program to DELETE 30 day old history from History Table');

  DBMS_SCHEDULER.define_program_argument(
   program_name => 'DEL_1_MONTH_OLD_HISTORY_PROG',
   argument_name => 'EMP_ID',
   argument_position => 1,
   argument_type => 'VARCHAR2',
   default_value => 'ABCD');

  DBMS_SCHEDULER.enable (name=>'DEL_1_MONTH_OLD_HISTORY_PROG');
END;
/

--SCHEDULE TO CREATE A JOB 
BEGIN
DBMS_SCHEDULER.create_schedule (
  schedule_name => 'DEL_1_MON_HISTORY_SCHED',
  start_date => SYSTIMESTAMP,
  repeat_interval => 'freq=daily; byhour=0; byminute=0; bysecond=0;',
  end_date => NULL,
  comments => 'run everyday at midnight');
END;
/

--THE NEEDED JOB TO DELETE HISTORY AUTOMATICALLY THAT IS 30 DAY OLD
BEGIN
DBMS_SCHEDULER.create_job (
  job_name => 'DEL_1_MONTH_HISTORY_JOB',
  program_name => 'DEL_1_MONTH_OLD_HISTORY_PROG',
  schedule_name => 'DEL_1_MON_HISTORY_SCHED',
  enabled => TRUE,
  comments => 'JOB TO DELETE OLD HISTORY AUTOMATICALLY');
END;
/


ALTER TABLE MERCHANTS ADD MERCHANT_MOBILE_NO VARCHAR2(255) CONSTRAINT MERCHANT_MOBILE_NN NOT NULL;

--TODAY CHANGES

DROP TABLE PAYMENT;
DROP TABLE MERCHANTS;
COMMIT;

CREATE TABLE MERCHANTS
(
MERCHANT_ID NUMBER(38) CONSTRAINT MERCHANT_ID_NN NOT NULL,
MERCHANT_NAME VARCHAR2(255) CONSTRAINT MERCHANT_NAME_NN NOT NULL,
MERCHANT_LOGO_IMAGE VARCHAR2(255) CONSTRAINT MERCHANT_LOGO_NN NOT NULL,
MERCHANT_PASSWORD VARCHAR2(255) CONSTRAINT MERCHANT_PASSWORD_NN NOT NULL,
APPROVED_BY NUMBER(38),
OFFER_ID NUMBER(38),

CONSTRAINT PK_MERCHANTS PRIMARY KEY (MERCHANT_ID),
CONSTRAINT FK_MERCHANTS_ADMIN_ID FOREIGN KEY(APPROVED_BY) REFERENCES ADMIN(ADMIN_ID),
CONSTRAINT UNQ_MERCHANT_NAME UNIQUE(MERCHANT_NAME),
CONSTRAINT FK_OFFER_ID_MERCHANTS FOREIGN KEY (OFFER_ID) REFERENCES OFFERS(OFFER_ID)
);



CREATE TABLE BRANCH
(
BRANCH_ID NUMBER(38) CONSTRAINT BRANCH_ID_NN NOT NULL,
BRANCH_NAME VARCHAR2(255) CONSTRAINT BRANCH_NAME_NN NOT NULL,
BRANCH_MOBILE_NO VARCHAR2(255) CONSTRAINT BRANCH_MOBILE_NN NOT NULL,
MERCHANT_BRANCH_BALANCE NUMBER,
BRANCH_MERCHANT_ID NUMBER(38) CONSTRAINT BRANCH_MERCHANT_ID_NN NOT NULL,
BRANCH_PASSWORD VARCHAR2(255) CONSTRAINT BRANCH_PASSWORD_NN NOT NULL,

CONSTRAINT PK_BRANCH PRIMARY KEY (BRANCH_ID),
CONSTRAINT UNQ_BRANCH_MOBILE_NO UNIQUE(BRANCH_MOBILE_NO),
CONSTRAINT FK_BRANCH_MERCHANT_ID FOREIGN KEY (BRANCH_MERCHANT_ID) REFERENCES MERCHANTS(MERCHANT_ID)
);


CREATE TABLE PAYMENT
(
MERCHANT_BRANCH_ID NUMBER(38) CONSTRAINT PAYMENT_MERCHANT_BRANCH_ID_NN NOT NULL,
USER_ID NUMBER(38) CONSTRAINT PAYMENT_USER_ID_NN NOT NULL,
HISTORY_ID NUMBER(38) CONSTRAINT PAYMENT_HISTORY_ID_NN NOT NULL,
TRANSACTION_AMOUNT_PAYMENT NUMBER(38) CONSTRAINT TRANSACTION_AMOUNT_PAYMENT_NN NOT NULL,

CONSTRAINT PK_PAYMENT PRIMARY KEY(USER_ID,HISTORY_ID),
CONSTRAINT UNQ_PAYMENT UNIQUE(MERCHANT_BRANCH_ID,HISTORY_ID),
CONSTRAINT FK_USER_ID_PAYMENT FOREIGN KEY(USER_ID) REFERENCES USERS(USER_ID),
CONSTRAINT FK_HISTORY_ID_PAYMENT FOREIGN KEY(HISTORY_ID) REFERENCES HISTORY(HISTORY_ID) ON DELETE CASCADE,
CONSTRAINT FK_MERCHANT_BRANCH_ID_PAYMENT FOREIGN KEY(MERCHANT_BRANCH_ID) REFERENCES BRANCH(BRANCH_ID)
);


--REPLACING TRIGGER TO AUTOMATIC INSERT INTO HISTORY TABLE WHEN INSERTING INTO PAYMENT TABLE

CREATE OR REPLACE TRIGGER mer_payment_history_trigger
BEFORE INSERT
ON PAYMENT
FOR EACH ROW
DECLARE 
	TRAN_ID VARCHAR2(38);
	TRAN_TIME DATE;
	TRAN_TYPE NUMBER;
	IS_UNIQUE BOOLEAN;
BEGIN
		IS_UNIQUE := FALSE;
		
		LOOP
			SELECT DBMS_RANDOM.STRING('X',10) INTO TRAN_ID FROM DUAL;
			IS_UNIQUE := IS_UNIQUE_TRAN_ID(TRAN_ID);
			EXIT WHEN (IS_UNIQUE = TRUE);
		END LOOP;
		
  	SELECT SYSDATE INTO TRAN_TIME FROM DUAL;
	
	INSERT INTO HISTORY(TYPE_ID,TRANSACTION_ID,TRANSACTION_TIME)
	VALUES(5,TRAN_ID,TRAN_TIME);

	SELECT seq_history_id.currval
	INTO :NEW.HISTORY_ID
	FROM DUAL;
	COMMIT;

END;
/
--TO ADD TARDE LICENSE NUMBER AND HEAD OFFICE LOCATION IN MERCHANTS TABLE
ALTER TABLE MERCHANTS ADD TRADE_LICENSE_NO VARCHAR2(255) CONSTRAINT MER_TRADE_LICENSE_NN NOT NULL;
ALTER TABLE MERCHANTS ADD HEAD_OFFICE_LOCATION VARCHAR2(255) CONSTRAINT MER_HEAD_OFFICE_LOCATION_NN NOT NULL;


--Alter service providers
ALTER TABLE UTILITY_SERVICE DROP COLUMN APPROVED_BY;

ALTER TABLE UTILITY_SERVICE ADD
(
BALANCE NUMBER CONSTRAINT UTILITY_SERVICE_BALANCE_NN NOT NULL,
APPROVED_BY NUMBER(38),
CONSTRAINT FK_UTILITY_SERVICE_ADMIN_ID FOREIGN KEY(APPROVED_BY) REFERENCES ADMIN(ADMIN_ID)
);

ALTER TABLE UTILITY_SERVICE ADD
SERVICE_PHOTO VARCHAR2(255) CONSTRAINT UTILITY_SERVICE_PHOTO_NN NOT NULL;

ALTER TABLE PAY_UTILITY_BILL ADD
BILLING_ID VARCHAR2(255) CONSTRAINT PAY_UTILITY_BILL_NN NOT NULL;




ALTER TABLE BRANCH DROP COLUMN BRANCH_PASSWORD;
DROP CONSTRAINT  
